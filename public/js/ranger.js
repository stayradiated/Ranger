// Generated by CoffeeScript 1.6.1
(function() {
  var template, vent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  window.App = {
    Models: {},
    Collections: {},
    Views: {}
  };

  vent = _.extend(Backbone.Events);

  template = function(id) {
    return _.template($("#" + id + "-template").html());
  };

  App.Models.Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      name: '',
      child: false
    };

    Item.prototype.initialize = function(data) {
      var child;
      console.log('> Creating item', data.name);
      if (data.child == null) {
        return;
      }
      child = new App.Models.Pane(data.child);
      return this.set('child', child);
    };

    return Item;

  })(Backbone.Model);

  App.Models.Pane = (function(_super) {

    __extends(Pane, _super);

    function Pane() {
      return Pane.__super__.constructor.apply(this, arguments);
    }

    Pane.prototype.defaults = {
      title: '',
      contents: []
    };

    Pane.prototype.initialize = function(data) {
      var contents;
      console.log('## Creating pane', data.title);
      contents = new App.Collections.Items();
      this.set('contents', contents);
      return contents.add(data.contents);
    };

    return Pane;

  })(Backbone.Model);

  App.Collections.Items = (function(_super) {

    __extends(Items, _super);

    function Items() {
      return Items.__super__.constructor.apply(this, arguments);
    }

    Items.prototype.model = App.Models.Item;

    return Items;

  })(Backbone.Collection);

  App.Collections.Panes = (function(_super) {

    __extends(Panes, _super);

    function Panes() {
      return Panes.__super__.constructor.apply(this, arguments);
    }

    Panes.prototype.model = App.Models.Pane;

    return Panes;

  })(Backbone.Collection);

  App.Views.Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      var _this = this;
      this.select = function() {
        return Item.prototype.select.apply(_this, arguments);
      };
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.tagName = 'div';

    Item.prototype.className = 'item';

    Item.prototype.template = template('item');

    Item.prototype.events = {
      'mousedown': 'click'
    };

    Item.prototype.initialize = function() {
      this.model.on('select', this.select);
      return this.$el.toggleClass('hasChild', !!this.model.get('child'));
    };

    Item.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    Item.prototype.click = function() {
      return this.model.collection.trigger('click:item', this.model);
    };

    Item.prototype.select = function() {
      return this.$el.addClass('active');
    };

    return Item;

  })(Backbone.View);

  App.Views.Pane = (function(_super) {

    __extends(Pane, _super);

    function Pane() {
      var _this = this;
      this.right = function() {
        return Pane.prototype.right.apply(_this, arguments);
      };
      this.down = function() {
        return Pane.prototype.down.apply(_this, arguments);
      };
      this.up = function() {
        return Pane.prototype.up.apply(_this, arguments);
      };
      this.move = function(direction) {
        return Pane.prototype.move.apply(_this, arguments);
      };
      this.addOne = function(item) {
        return Pane.prototype.addOne.apply(_this, arguments);
      };
      this.render = function() {
        return Pane.prototype.render.apply(_this, arguments);
      };
      this.select = function(item) {
        return Pane.prototype.select.apply(_this, arguments);
      };
      return Pane.__super__.constructor.apply(this, arguments);
    }

    Pane.prototype.tagName = 'section';

    Pane.prototype.className = 'pane';

    Pane.prototype.template = template('pane');

    Pane.prototype.initialize = function() {
      var _this = this;
      this.active = null;
      console.log('> Creating a new view', this.cid);
      this.model.on('remove', function() {
        console.log('-- Removing pane', _this.model.cid, _this.model.cid);
        return _this.remove();
      });
      this.model.on('move:up', this.up);
      this.model.on('move:down', this.down);
      this.model.on('move:right', this.right);
      return this.model.get('contents').on('click:item', this.select);
    };

    Pane.prototype.select = function(item) {
      console.log(item.toJSON(), this.model.toJSON());
      vent.trigger('select:pane', this.model);
      this.active = this.model.get('contents').indexOf(item);
      this.$el.addClass('active');
      this.$('.active').removeClass('active');
      item.trigger('select');
      return vent.trigger('select:item', item, this.model);
    };

    Pane.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$items = this.$('.items');
      this.model.get('contents').each(this.addOne);
      return this;
    };

    Pane.prototype.addOne = function(item) {
      var itemView;
      itemView = new App.Views.Item({
        model: item
      });
      return this.$items.append(itemView.render().el);
    };

    Pane.prototype.move = function(direction) {
      var active, contents, item;
      active = this.active;
      contents = this.model.get('contents');
      active += direction;
      if (active < 0) {
        active = 0;
      } else if (active > contents.length - 1) {
        active = contents.length - 1;
      }
      if (active === this.active) {
        return;
      }
      this.active = active;
      item = contents.at(this.active);
      return this.select(item);
    };

    Pane.prototype.up = function() {
      return this.move(-1);
    };

    Pane.prototype.down = function() {
      return this.move(1);
    };

    Pane.prototype.right = function() {
      var child, current, item;
      current = this.model.get('contents').at(this.active);
      child = current.get('child').get('contents');
      item = child.at(0);
      return child.trigger('click:item', item);
    };

    return Pane;

  })(Backbone.View);

  App.Views.Ranger = (function(_super) {

    __extends(Ranger, _super);

    function Ranger() {
      var _this = this;
      this.left = function() {
        return Ranger.prototype.left.apply(_this, arguments);
      };
      this.right = function() {
        return Ranger.prototype.right.apply(_this, arguments);
      };
      this.down = function() {
        return Ranger.prototype.down.apply(_this, arguments);
      };
      this.up = function() {
        return Ranger.prototype.up.apply(_this, arguments);
      };
      this.loadRaw = function(array, panes) {
        return Ranger.prototype.loadRaw.apply(_this, arguments);
      };
      this.addOne = function(pane) {
        return Ranger.prototype.addOne.apply(_this, arguments);
      };
      this.recheck = function(pane) {
        return Ranger.prototype.recheck.apply(_this, arguments);
      };
      this.selectItem = function(item, pane) {
        return Ranger.prototype.selectItem.apply(_this, arguments);
      };
      this.selectPane = function(pane) {
        return Ranger.prototype.selectPane.apply(_this, arguments);
      };
      return Ranger.__super__.constructor.apply(this, arguments);
    }

    Ranger.prototype.el = '.ranger';

    Ranger.prototype.initialize = function() {
      this.active = null;
      this.panes = new App.Collections.Panes;
      this.panes.on('add show', this.addOne);
      vent.on('select:item', this.selectItem);
      return vent.on('select:pane', this.selectPane);
    };

    Ranger.prototype.selectPane = function(pane) {
      this.active = pane;
      return this.$('.active.pane').removeClass('active');
    };

    Ranger.prototype.selectItem = function(item, pane) {
      var childPane;
      console.log('> Selecting pane', pane.cid);
      this.recheck(pane);
      childPane = item.get('child');
      if (childPane === false) {
        return;
      }
      return this.panes.trigger('show', childPane);
    };

    Ranger.prototype.recheck = function(pane) {
      var _this = this;
      return pane.get('contents').each(function(item) {
        var childPane;
        childPane = item.get('child');
        if (childPane === false) {
          return;
        }
        childPane.trigger('remove');
        return _this.recheck(childPane);
      });
    };

    Ranger.prototype.addOne = function(pane) {
      var paneView;
      paneView = new App.Views.Pane({
        model: pane
      });
      return this.$el.append(paneView.render().el);
    };

    Ranger.prototype.loadRaw = function(array, panes) {
      var i, id, item, key, length, main, map, out, title, x, _base, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      map = {};
      main = {};
      length = panes.length - 1;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        out = main;
        x = '';
        for (i = _j = 0, _len1 = panes.length; _j < _len1; i = ++_j) {
          _ref = panes[i], title = _ref[0], key = _ref[1];
          x += title + ':' + item[key] + ':';
          out.title = title;
          if ((_ref1 = out.contents) == null) {
            out.contents = [];
          }
          if (map[x] === void 0) {
            id = out.contents.push({
              name: item[key]
            }) - 1;
            map[x] = out.contents[id];
          }
          if (i !== length) {
            out = (_ref2 = (_base = map[x]).child) != null ? _ref2 : _base.child = {};
          }
        }
      }
      return this.panes.add(main);
    };

    Ranger.prototype.up = function() {
      return this.active.trigger('move:up');
    };

    Ranger.prototype.down = function() {
      return this.active.trigger('move:down');
    };

    Ranger.prototype.right = function() {
      return this.active.trigger('move:right');
    };

    Ranger.prototype.left = function() {
      var pane;
      pane = this.panes.get(id);
      return console.log(pane);
    };

    return Ranger;

  })(Backbone.View);

}).call(this);
